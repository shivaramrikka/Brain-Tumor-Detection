{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-04-18T09:37:15.100874Z",
     "iopub.status.busy": "2022-04-18T09:37:15.100521Z",
     "iopub.status.idle": "2022-04-18T09:37:36.531533Z",
     "shell.execute_reply": "2022-04-18T09:37:36.530568Z",
     "shell.execute_reply.started": "2022-04-18T09:37:15.100787Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import math\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import seaborn as sns\n",
    "import umap\n",
    "from PIL import Image\n",
    "from scipy import misc\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "import numpy as np\n",
    "from scipy import misc\n",
    "from random import shuffle\n",
    "from collections import Counter\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.manifold import TSNE\n",
    "import tensorflow as tf\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D\n",
    "from keras.layers import Activation, Dropout, Flatten, Dense\n",
    "from keras.utils.np_utils import to_categorical\n",
    "\n",
    "#importing important library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2022-04-18T09:37:44.867233Z",
     "iopub.status.busy": "2022-04-18T09:37:44.866918Z",
     "iopub.status.idle": "2022-04-18T09:37:44.885892Z",
     "shell.execute_reply": "2022-04-18T09:37:44.884807Z",
     "shell.execute_reply.started": "2022-04-18T09:37:44.867201Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['no', 'yes']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir('../input/brain_tumor_dataset') #just to see the classes we have the image can contain a tumor or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:38:30.524479Z",
     "iopub.status.busy": "2022-04-18T09:38:30.523644Z",
     "iopub.status.idle": "2022-04-18T09:38:30.563327Z",
     "shell.execute_reply": "2022-04-18T09:38:30.562131Z",
     "shell.execute_reply.started": "2022-04-18T09:38:30.524442Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<PIL.Image.Image image mode=L size=128x128 at 0x7F2DB3BC9E50>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im =Image.open('../input/brain_tumor_dataset/no/1 no.jpeg').resize((128,128))\n",
    "im\n",
    "#we look at an image with no tumor NO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:38:34.387259Z",
     "iopub.status.busy": "2022-04-18T09:38:34.386877Z",
     "iopub.status.idle": "2022-04-18T09:38:34.409930Z",
     "shell.execute_reply": "2022-04-18T09:38:34.408831Z",
     "shell.execute_reply.started": "2022-04-18T09:38:34.387228Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=128x128 at 0x7F2D4EFC3950>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "im =Image.open('../input/brain_tumor_dataset/yes/Y1.jpg').resize((128,128))\n",
    "im\n",
    "#we look into an image with a tumor Yes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:39:18.607019Z",
     "iopub.status.busy": "2022-04-18T09:39:18.606386Z",
     "iopub.status.idle": "2022-04-18T09:39:18.683863Z",
     "shell.execute_reply": "2022-04-18T09:39:18.682842Z",
     "shell.execute_reply.started": "2022-04-18T09:39:18.606985Z"
    }
   },
   "outputs": [],
   "source": [
    "yes=os.listdir('../input/brain_tumor_dataset/yes')\n",
    "no=os.listdir('../input/brain_tumor_dataset/no')\n",
    "#Point to the respective folder for each clase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:40:22.281643Z",
     "iopub.status.busy": "2022-04-18T09:40:22.281353Z",
     "iopub.status.idle": "2022-04-18T09:40:22.290309Z",
     "shell.execute_reply": "2022-04-18T09:40:22.289160Z",
     "shell.execute_reply.started": "2022-04-18T09:40:22.281613Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=np.concatenate([yes,no])\n",
    "\n",
    "#we merge our data into one variable "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:41:57.113343Z",
     "iopub.status.busy": "2022-04-18T09:41:57.112905Z",
     "iopub.status.idle": "2022-04-18T09:41:57.119402Z",
     "shell.execute_reply": "2022-04-18T09:41:57.118137Z",
     "shell.execute_reply.started": "2022-04-18T09:41:57.113302Z"
    }
   },
   "outputs": [],
   "source": [
    "target_x=np.full(len(yes),1)\n",
    "target_y=np.full(len(no),0)\n",
    "#to label the data 1 means yes and 0 means no \n",
    "data_target=np.concatenate([target_x,target_y])\n",
    "#now we concatenate the result so the previous merged data have labels its all a prepartion for the training phase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:42:00.679849Z",
     "iopub.status.busy": "2022-04-18T09:42:00.678870Z",
     "iopub.status.idle": "2022-04-18T09:42:00.687965Z",
     "shell.execute_reply": "2022-04-18T09:42:00.686681Z",
     "shell.execute_reply.started": "2022-04-18T09:42:00.679816Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_target)==len(data)\n",
    "#we can see that each picture in data have a label inside data_target "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:44:06.383990Z",
     "iopub.status.busy": "2022-04-18T09:44:06.382910Z",
     "iopub.status.idle": "2022-04-18T09:44:06.394382Z",
     "shell.execute_reply": "2022-04-18T09:44:06.393431Z",
     "shell.execute_reply.started": "2022-04-18T09:44:06.383947Z"
    }
   },
   "outputs": [],
   "source": [
    "yes_values=os.listdir('../input/brain_tumor_dataset/yes')\n",
    "no_values=os.listdir('../input/brain_tumor_dataset/no')\n",
    "#repoint to the 2 directory of our classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:10:55.209416Z",
     "iopub.status.busy": "2022-04-18T10:10:55.209141Z",
     "iopub.status.idle": "2022-04-18T10:10:55.784374Z",
     "shell.execute_reply": "2022-04-18T10:10:55.783222Z",
     "shell.execute_reply.started": "2022-04-18T10:10:55.209385Z"
    }
   },
   "outputs": [],
   "source": [
    "X_data =[]\n",
    "for file in yes_values:\n",
    "    #face = misc.imread('../input/brain_tumor_dataset/yes/'+file)\n",
    "    img = cv2.imread('../input/brain_tumor_dataset/yes/'+file)\n",
    "    face = cv2.resize(img, (32, 32) ) #we resize so we can train faster\n",
    "    (b, g, r)=cv2.split(face)  #to get the 3 cannels of a picture to note that open cv give the blue green red not rgb its bgr but its okey\n",
    "    img=cv2.merge([r,g,b])# and we merge the three channels because they all give diffirent info so we don't want to negligate any info\n",
    "    X_data.append(img) # we append them into xdata to do the trainnong just like we did with data\n",
    "#print(X_data)    \n",
    "#transforming the data to arrays because that what the model see just an array of values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:09.484415Z",
     "iopub.status.busy": "2022-04-18T10:11:09.484137Z",
     "iopub.status.idle": "2022-04-18T10:11:10.450723Z",
     "shell.execute_reply": "2022-04-18T10:11:10.449465Z",
     "shell.execute_reply.started": "2022-04-18T10:11:09.484384Z"
    }
   },
   "outputs": [],
   "source": [
    "#X_data =[]\n",
    "for file in no_values:\n",
    "    #face = misc.imread('../input/brain_tumor_dataset/yes/'+file)\n",
    "    img = cv2.imread('../input/brain_tumor_dataset/no/'+file)\n",
    "    face = cv2.resize(img, (32, 32) )\n",
    "    (b, g, r)=cv2.split(face) \n",
    "    img=cv2.merge([r,g,b])\n",
    "    X_data.append(img)\n",
    "    \n",
    "#same thing but just we will add the non value means the images that dosent contain tumor because our model need to see both images with tumors\n",
    "#and images without "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:11.832162Z",
     "iopub.status.busy": "2022-04-18T10:11:11.831839Z",
     "iopub.status.idle": "2022-04-18T10:11:11.838211Z",
     "shell.execute_reply": "2022-04-18T10:11:11.836895Z",
     "shell.execute_reply.started": "2022-04-18T10:11:11.832131Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "X = np.squeeze(X_data) #the squeeze() function is used to remove single-dimensional entries from the shape of an array as you can see here https://www.w3resource.com/numpy/manipulation/squeeze.php\n",
    "#omit the comments if you want to see a comparison between the two\n",
    "#print(X_data[0])\n",
    "#print(X[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:14.487265Z",
     "iopub.status.busy": "2022-04-18T10:11:14.486938Z",
     "iopub.status.idle": "2022-04-18T10:11:14.495938Z",
     "shell.execute_reply": "2022-04-18T10:11:14.494662Z",
     "shell.execute_reply.started": "2022-04-18T10:11:14.487233Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(253, 32, 32, 3)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:18.300692Z",
     "iopub.status.busy": "2022-04-18T10:11:18.300403Z",
     "iopub.status.idle": "2022-04-18T10:11:18.308032Z",
     "shell.execute_reply": "2022-04-18T10:11:18.306695Z",
     "shell.execute_reply.started": "2022-04-18T10:11:18.300661Z"
    }
   },
   "outputs": [],
   "source": [
    "# Normalisation des valeur\n",
    "X = X.astype('float32')\n",
    "X /= 255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T09:59:18.174378Z",
     "iopub.status.busy": "2022-04-18T09:59:18.173617Z",
     "iopub.status.idle": "2022-04-18T09:59:18.178424Z",
     "shell.execute_reply": "2022-04-18T09:59:18.177278Z",
     "shell.execute_reply.started": "2022-04-18T09:59:18.174324Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "#categorical_labels = to_categorical(data_target, num_classes=2)\n",
    "#print(categorical_labels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:23.439937Z",
     "iopub.status.busy": "2022-04-18T10:11:23.439422Z",
     "iopub.status.idle": "2022-04-18T10:11:23.451689Z",
     "shell.execute_reply": "2022-04-18T10:11:23.450476Z",
     "shell.execute_reply.started": "2022-04-18T10:11:23.439895Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_target #dont forget that data_target containes the labels for the data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:25.391594Z",
     "iopub.status.busy": "2022-04-18T10:11:25.391135Z",
     "iopub.status.idle": "2022-04-18T10:11:25.398657Z",
     "shell.execute_reply": "2022-04-18T10:11:25.397466Z",
     "shell.execute_reply.started": "2022-04-18T10:11:25.391555Z"
    }
   },
   "outputs": [],
   "source": [
    "#Now this is an important part where we devide our data to training set validation set and test set  note that \n",
    "#x represent the data and Y represent the label of that data that wy x_* is taken from X and y_* is taken from data_target\n",
    "(x_train, y_train), (x_test, y_test) = (X[:190],data_target[:190]) , (X[190:] , data_target[190:])\n",
    "(x_valid , y_valid) = (x_test[:63], y_test[:63])\n",
    "#(x_test, y_test) = (x_test[63:], y_test[63:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:27.485751Z",
     "iopub.status.busy": "2022-04-18T10:11:27.484982Z",
     "iopub.status.idle": "2022-04-18T10:11:27.683450Z",
     "shell.execute_reply": "2022-04-18T10:11:27.682583Z",
     "shell.execute_reply.started": "2022-04-18T10:11:27.485702Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_3 (Conv2D)            (None, 32, 32, 16)        3904      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 16, 16, 16)        0         \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 16, 16, 16)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 16, 16, 16)        20752     \n",
      "_________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2 (None, 8, 8, 16)          0         \n",
      "_________________________________________________________________\n",
      "dropout_5 (Dropout)          (None, 8, 8, 16)          0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 8, 8, 36)          46692     \n",
      "_________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2 (None, 4, 4, 36)          0         \n",
      "_________________________________________________________________\n",
      "dropout_6 (Dropout)          (None, 4, 4, 36)          0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 576)               0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 512)               295424    \n",
      "_________________________________________________________________\n",
      "dropout_7 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1)                 513       \n",
      "=================================================================\n",
      "Total params: 367,285\n",
      "Trainable params: 367,285\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#here we define the model that we are going to train we use keras from tensor flow \n",
    "model = tf.keras.Sequential()\n",
    "\n",
    "# Must define the input shape in the first layer of the neural network you can see that the input shape is the same as when we resized\n",
    "#using open cv \n",
    "model.add(tf.keras.layers.Conv2D(filters=16,kernel_size=9, padding='same', activation='relu', input_shape=(32,32,3))) \n",
    "model.add(tf.keras.layers.MaxPooling2D(pool_size=2))\n",
    "model.add(tf.keras.layers.Dropout(0.45))\n",
    "#you can type in google keras.layer.dropout for more info about the layyers \n",
    "model.add(tf.keras.layers.Conv2D(filters=16,kernel_size=9,padding='same', activation='relu'))\n",
    "model.add(tf.keras.layers.MaxPooling2D(pool_size=2))\n",
    "model.add(tf.keras.layers.Dropout(0.25))\n",
    "#you can omit coment to add a layer and you can add multiple ones so the model becom more efficient \n",
    "#model.add(tf.keras.layers.Conv2D(filters=16,kernel_size=9,padding='same', activation='relu'))\n",
    "#model.add(tf.keras.layers.MaxPooling2D(pool_size=2))\n",
    "#model.add(tf.keras.layers.Dropout(0.25))\n",
    "\n",
    "model.add(tf.keras.layers.Conv2D(filters=36, kernel_size=9, padding='same', activation='relu'))\n",
    "model.add(tf.keras.layers.MaxPooling2D(pool_size=2))\n",
    "model.add(tf.keras.layers.Dropout(0.25))\n",
    "\n",
    "model.add(tf.keras.layers.Flatten())\n",
    "\n",
    "model.add(tf.keras.layers.Dense(512, activation='relu'))\n",
    "model.add(tf.keras.layers.Dropout(0.15))\n",
    "model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
    "#and search activation function in cnn because you will be asked about it or you can ask me \n",
    "#so here is our fully connected model it have 3 layers and dicision layer and here you can add or supp a layer\n",
    "# Take a look at the model summary\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:30.864319Z",
     "iopub.status.busy": "2022-04-18T10:11:30.864006Z",
     "iopub.status.idle": "2022-04-18T10:11:30.875916Z",
     "shell.execute_reply": "2022-04-18T10:11:30.874730Z",
     "shell.execute_reply.started": "2022-04-18T10:11:30.864287Z"
    }
   },
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy',\n",
    "             optimizer=tf.keras.optimizers.Adam(),\n",
    "             metrics=['acc'])\n",
    "#this model.compile dosen't do somthing big it just define the parameters for the model like the loss function the optimize and metrics you can lookup each one of them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:11:32.108466Z",
     "iopub.status.busy": "2022-04-18T10:11:32.108064Z",
     "iopub.status.idle": "2022-04-18T10:11:53.770045Z",
     "shell.execute_reply": "2022-04-18T10:11:53.768750Z",
     "shell.execute_reply.started": "2022-04-18T10:11:32.108423Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-18 10:11:32.445281: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-04-18 10:11:34.200420: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8005\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2/2 [==============================] - 8s 328ms/step - loss: 0.6630 - acc: 0.4211 - val_loss: 1.5497 - val_acc: 0.0000e+00\n",
      "Epoch 2/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.5177 - acc: 0.8158 - val_loss: 1.0599 - val_acc: 0.0000e+00\n",
      "Epoch 3/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4600 - acc: 0.8158 - val_loss: 0.9772 - val_acc: 0.0000e+00\n",
      "Epoch 4/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4579 - acc: 0.8158 - val_loss: 1.2046 - val_acc: 0.0000e+00\n",
      "Epoch 5/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4525 - acc: 0.8158 - val_loss: 1.3654 - val_acc: 0.0000e+00\n",
      "Epoch 6/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4721 - acc: 0.8158 - val_loss: 1.1239 - val_acc: 0.0000e+00\n",
      "Epoch 7/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.4421 - acc: 0.8158 - val_loss: 1.0220 - val_acc: 0.0000e+00\n",
      "Epoch 8/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4461 - acc: 0.8158 - val_loss: 1.0230 - val_acc: 0.0000e+00\n",
      "Epoch 9/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.4452 - acc: 0.8158 - val_loss: 1.1239 - val_acc: 0.0000e+00\n",
      "Epoch 10/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4417 - acc: 0.8158 - val_loss: 1.1552 - val_acc: 0.0000e+00\n",
      "Epoch 11/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4348 - acc: 0.8158 - val_loss: 1.0856 - val_acc: 0.0000e+00\n",
      "Epoch 12/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4266 - acc: 0.8158 - val_loss: 0.9591 - val_acc: 0.0000e+00\n",
      "Epoch 13/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4310 - acc: 0.8158 - val_loss: 0.8891 - val_acc: 0.0000e+00\n",
      "Epoch 14/150\n",
      "2/2 [==============================] - 0s 45ms/step - loss: 0.4366 - acc: 0.8158 - val_loss: 0.9517 - val_acc: 0.0000e+00\n",
      "Epoch 15/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4264 - acc: 0.8158 - val_loss: 1.0756 - val_acc: 0.0000e+00\n",
      "Epoch 16/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4454 - acc: 0.8158 - val_loss: 0.9449 - val_acc: 0.0000e+00\n",
      "Epoch 17/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4227 - acc: 0.8158 - val_loss: 0.8925 - val_acc: 0.0000e+00\n",
      "Epoch 18/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4085 - acc: 0.8158 - val_loss: 0.8737 - val_acc: 0.0000e+00\n",
      "Epoch 19/150\n",
      "2/2 [==============================] - 0s 45ms/step - loss: 0.4138 - acc: 0.8158 - val_loss: 0.9348 - val_acc: 0.0000e+00\n",
      "Epoch 20/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4054 - acc: 0.8158 - val_loss: 0.9165 - val_acc: 0.0000e+00\n",
      "Epoch 21/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4023 - acc: 0.8158 - val_loss: 0.8029 - val_acc: 0.0000e+00\n",
      "Epoch 22/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4108 - acc: 0.8158 - val_loss: 0.9589 - val_acc: 0.0000e+00\n",
      "Epoch 23/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4133 - acc: 0.8158 - val_loss: 0.9197 - val_acc: 0.0000e+00\n",
      "Epoch 24/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3963 - acc: 0.8158 - val_loss: 0.7828 - val_acc: 0.0000e+00\n",
      "Epoch 25/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.4047 - acc: 0.8158 - val_loss: 0.8472 - val_acc: 0.0000e+00\n",
      "Epoch 26/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3942 - acc: 0.8158 - val_loss: 0.8834 - val_acc: 0.0000e+00\n",
      "Epoch 27/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3963 - acc: 0.8158 - val_loss: 0.8430 - val_acc: 0.0952\n",
      "Epoch 28/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.4012 - acc: 0.8158 - val_loss: 0.8198 - val_acc: 0.2222\n",
      "Epoch 29/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3797 - acc: 0.8158 - val_loss: 0.9122 - val_acc: 0.2063\n",
      "Epoch 30/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3907 - acc: 0.8158 - val_loss: 0.7961 - val_acc: 0.3810\n",
      "Epoch 31/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3920 - acc: 0.8158 - val_loss: 0.7750 - val_acc: 0.4762\n",
      "Epoch 32/150\n",
      "2/2 [==============================] - 0s 45ms/step - loss: 0.3868 - acc: 0.8316 - val_loss: 0.8027 - val_acc: 0.4444\n",
      "Epoch 33/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3765 - acc: 0.8263 - val_loss: 0.9079 - val_acc: 0.2857\n",
      "Epoch 34/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3811 - acc: 0.8316 - val_loss: 0.9455 - val_acc: 0.2857\n",
      "Epoch 35/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3902 - acc: 0.8211 - val_loss: 0.7339 - val_acc: 0.6032\n",
      "Epoch 36/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.4188 - acc: 0.8474 - val_loss: 0.7223 - val_acc: 0.5873\n",
      "Epoch 37/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3992 - acc: 0.8368 - val_loss: 0.9858 - val_acc: 0.2063\n",
      "Epoch 38/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3981 - acc: 0.8263 - val_loss: 0.8874 - val_acc: 0.2540\n",
      "Epoch 39/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3719 - acc: 0.8316 - val_loss: 0.7677 - val_acc: 0.4286\n",
      "Epoch 40/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3975 - acc: 0.8421 - val_loss: 0.7950 - val_acc: 0.3810\n",
      "Epoch 41/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3789 - acc: 0.8421 - val_loss: 0.9146 - val_acc: 0.2857\n",
      "Epoch 42/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3692 - acc: 0.8421 - val_loss: 0.8753 - val_acc: 0.3810\n",
      "Epoch 43/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3770 - acc: 0.8421 - val_loss: 0.7503 - val_acc: 0.5714\n",
      "Epoch 44/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3834 - acc: 0.8526 - val_loss: 0.7923 - val_acc: 0.5556\n",
      "Epoch 45/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3533 - acc: 0.8579 - val_loss: 0.8874 - val_acc: 0.4762\n",
      "Epoch 46/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3655 - acc: 0.8737 - val_loss: 0.7838 - val_acc: 0.5556\n",
      "Epoch 47/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3706 - acc: 0.8421 - val_loss: 0.7120 - val_acc: 0.5873\n",
      "Epoch 48/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3664 - acc: 0.8526 - val_loss: 0.8650 - val_acc: 0.5079\n",
      "Epoch 49/150\n",
      "2/2 [==============================] - 0s 44ms/step - loss: 0.3745 - acc: 0.8526 - val_loss: 0.9241 - val_acc: 0.4286\n",
      "Epoch 50/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3726 - acc: 0.8526 - val_loss: 0.7108 - val_acc: 0.5397\n",
      "Epoch 51/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3599 - acc: 0.8789 - val_loss: 0.7145 - val_acc: 0.5238\n",
      "Epoch 52/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3547 - acc: 0.8632 - val_loss: 0.7844 - val_acc: 0.4444\n",
      "Epoch 53/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3269 - acc: 0.8579 - val_loss: 0.7854 - val_acc: 0.5079\n",
      "Epoch 54/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3257 - acc: 0.8632 - val_loss: 0.6848 - val_acc: 0.5397\n",
      "Epoch 55/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3288 - acc: 0.8737 - val_loss: 0.6668 - val_acc: 0.5556\n",
      "Epoch 56/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3462 - acc: 0.8684 - val_loss: 0.6392 - val_acc: 0.5714\n",
      "Epoch 57/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.3191 - acc: 0.8421 - val_loss: 0.5223 - val_acc: 0.8095\n",
      "Epoch 58/150\n",
      "2/2 [==============================] - 0s 44ms/step - loss: 0.3143 - acc: 0.8737 - val_loss: 0.7605 - val_acc: 0.5397\n",
      "Epoch 59/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3163 - acc: 0.8632 - val_loss: 0.7435 - val_acc: 0.5397\n",
      "Epoch 60/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2977 - acc: 0.8632 - val_loss: 0.5651 - val_acc: 0.7143\n",
      "Epoch 61/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2982 - acc: 0.8947 - val_loss: 0.6579 - val_acc: 0.5873\n",
      "Epoch 62/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3214 - acc: 0.8737 - val_loss: 0.7408 - val_acc: 0.5397\n",
      "Epoch 63/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2745 - acc: 0.8895 - val_loss: 0.5182 - val_acc: 0.7778\n",
      "Epoch 64/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3068 - acc: 0.8632 - val_loss: 0.7401 - val_acc: 0.5397\n",
      "Epoch 65/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3587 - acc: 0.8737 - val_loss: 0.7563 - val_acc: 0.5238\n",
      "Epoch 66/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.3094 - acc: 0.8579 - val_loss: 0.5302 - val_acc: 0.7619\n",
      "Epoch 67/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.3222 - acc: 0.8789 - val_loss: 0.6738 - val_acc: 0.5556\n",
      "Epoch 68/150\n",
      "2/2 [==============================] - 0s 45ms/step - loss: 0.3052 - acc: 0.8737 - val_loss: 0.8472 - val_acc: 0.4603\n",
      "Epoch 69/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2702 - acc: 0.8789 - val_loss: 0.6893 - val_acc: 0.5556\n",
      "Epoch 70/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.2878 - acc: 0.8789 - val_loss: 0.5235 - val_acc: 0.6508\n",
      "Epoch 71/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2760 - acc: 0.9000 - val_loss: 0.6197 - val_acc: 0.5873\n",
      "Epoch 72/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2479 - acc: 0.8895 - val_loss: 0.6889 - val_acc: 0.5873\n",
      "Epoch 73/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2538 - acc: 0.9053 - val_loss: 0.6080 - val_acc: 0.6349\n",
      "Epoch 74/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2500 - acc: 0.9053 - val_loss: 0.5425 - val_acc: 0.6667\n",
      "Epoch 75/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2289 - acc: 0.9105 - val_loss: 0.5923 - val_acc: 0.6508\n",
      "Epoch 76/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2242 - acc: 0.9053 - val_loss: 0.4651 - val_acc: 0.7619\n",
      "Epoch 77/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2413 - acc: 0.9211 - val_loss: 0.5783 - val_acc: 0.6508\n",
      "Epoch 78/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2107 - acc: 0.9158 - val_loss: 0.6473 - val_acc: 0.6190\n",
      "Epoch 79/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1917 - acc: 0.9105 - val_loss: 0.6062 - val_acc: 0.7302\n",
      "Epoch 80/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.1938 - acc: 0.9316 - val_loss: 0.5450 - val_acc: 0.7778\n",
      "Epoch 81/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1778 - acc: 0.9421 - val_loss: 0.6515 - val_acc: 0.6508\n",
      "Epoch 82/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1862 - acc: 0.9211 - val_loss: 0.6073 - val_acc: 0.6984\n",
      "Epoch 83/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1750 - acc: 0.9263 - val_loss: 0.7116 - val_acc: 0.6508\n",
      "Epoch 84/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1850 - acc: 0.9158 - val_loss: 0.4276 - val_acc: 0.7937\n",
      "Epoch 85/150\n",
      "2/2 [==============================] - 0s 44ms/step - loss: 0.1641 - acc: 0.9421 - val_loss: 0.5495 - val_acc: 0.7778\n",
      "Epoch 86/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1555 - acc: 0.9368 - val_loss: 0.3788 - val_acc: 0.8413\n",
      "Epoch 87/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.2147 - acc: 0.8947 - val_loss: 0.5181 - val_acc: 0.7460\n",
      "Epoch 88/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1856 - acc: 0.9105 - val_loss: 0.6513 - val_acc: 0.7302\n",
      "Epoch 89/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1589 - acc: 0.9368 - val_loss: 0.3315 - val_acc: 0.8730\n",
      "Epoch 90/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.2023 - acc: 0.9316 - val_loss: 0.5957 - val_acc: 0.7619\n",
      "Epoch 91/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1603 - acc: 0.9211 - val_loss: 0.5722 - val_acc: 0.7460\n",
      "Epoch 92/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.1469 - acc: 0.9421 - val_loss: 0.3845 - val_acc: 0.8254\n",
      "Epoch 93/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1281 - acc: 0.9579 - val_loss: 0.4579 - val_acc: 0.7937\n",
      "Epoch 94/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1164 - acc: 0.9632 - val_loss: 0.4992 - val_acc: 0.7460\n",
      "Epoch 95/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1395 - acc: 0.9421 - val_loss: 0.2784 - val_acc: 0.9048\n",
      "Epoch 96/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1098 - acc: 0.9579 - val_loss: 0.4701 - val_acc: 0.8095\n",
      "Epoch 97/150\n",
      "2/2 [==============================] - 0s 30ms/step - loss: 0.1031 - acc: 0.9632 - val_loss: 0.5062 - val_acc: 0.8095\n",
      "Epoch 98/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1248 - acc: 0.9474 - val_loss: 0.4106 - val_acc: 0.8413\n",
      "Epoch 99/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1072 - acc: 0.9632 - val_loss: 0.5109 - val_acc: 0.8095\n",
      "Epoch 100/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0813 - acc: 0.9684 - val_loss: 0.3677 - val_acc: 0.8413\n",
      "Epoch 101/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0936 - acc: 0.9632 - val_loss: 0.6396 - val_acc: 0.7778\n",
      "Epoch 102/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1340 - acc: 0.9421 - val_loss: 0.2803 - val_acc: 0.8730\n",
      "Epoch 103/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0970 - acc: 0.9684 - val_loss: 0.5020 - val_acc: 0.8095\n",
      "Epoch 104/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1228 - acc: 0.9421 - val_loss: 0.6567 - val_acc: 0.7619\n",
      "Epoch 105/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.1126 - acc: 0.9526 - val_loss: 0.3902 - val_acc: 0.8571\n",
      "Epoch 106/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0604 - acc: 0.9895 - val_loss: 0.3618 - val_acc: 0.8571\n",
      "Epoch 107/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0780 - acc: 0.9789 - val_loss: 0.4721 - val_acc: 0.8254\n",
      "Epoch 108/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0608 - acc: 0.9842 - val_loss: 0.5733 - val_acc: 0.8095\n",
      "Epoch 109/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0463 - acc: 0.9842 - val_loss: 0.4907 - val_acc: 0.8413\n",
      "Epoch 110/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0616 - acc: 0.9789 - val_loss: 0.4181 - val_acc: 0.8571\n",
      "Epoch 111/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0472 - acc: 0.9789 - val_loss: 0.6086 - val_acc: 0.7778\n",
      "Epoch 112/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0765 - acc: 0.9632 - val_loss: 0.3499 - val_acc: 0.8571\n",
      "Epoch 113/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.0611 - acc: 0.9684 - val_loss: 0.4180 - val_acc: 0.8413\n",
      "Epoch 114/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0698 - acc: 0.9737 - val_loss: 0.7059 - val_acc: 0.7619\n",
      "Epoch 115/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0662 - acc: 0.9789 - val_loss: 0.6204 - val_acc: 0.8095\n",
      "Epoch 116/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0520 - acc: 0.9789 - val_loss: 0.4562 - val_acc: 0.8413\n",
      "Epoch 117/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0821 - acc: 0.9684 - val_loss: 1.0004 - val_acc: 0.6667\n",
      "Epoch 118/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0431 - acc: 0.9895 - val_loss: 0.8854 - val_acc: 0.7143\n",
      "Epoch 119/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0651 - acc: 0.9789 - val_loss: 0.4510 - val_acc: 0.8571\n",
      "Epoch 120/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0612 - acc: 0.9789 - val_loss: 0.7806 - val_acc: 0.7619\n",
      "Epoch 121/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0752 - acc: 0.9737 - val_loss: 0.7514 - val_acc: 0.7619\n",
      "Epoch 122/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0398 - acc: 0.9842 - val_loss: 0.3983 - val_acc: 0.8571\n",
      "Epoch 123/150\n",
      "2/2 [==============================] - 0s 30ms/step - loss: 0.0542 - acc: 0.9789 - val_loss: 0.4991 - val_acc: 0.8254\n",
      "Epoch 124/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.0326 - acc: 0.9789 - val_loss: 0.5884 - val_acc: 0.8095\n",
      "Epoch 125/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0670 - acc: 0.9684 - val_loss: 0.4135 - val_acc: 0.8413\n",
      "Epoch 126/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0400 - acc: 0.9947 - val_loss: 0.5369 - val_acc: 0.8254\n",
      "Epoch 127/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0318 - acc: 0.9947 - val_loss: 0.9003 - val_acc: 0.7460\n",
      "Epoch 128/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0536 - acc: 0.9737 - val_loss: 0.8613 - val_acc: 0.7302\n",
      "Epoch 129/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0263 - acc: 0.9947 - val_loss: 0.6971 - val_acc: 0.8095\n",
      "Epoch 130/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0251 - acc: 1.0000 - val_loss: 0.9048 - val_acc: 0.7619\n",
      "Epoch 131/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0334 - acc: 0.9895 - val_loss: 0.6552 - val_acc: 0.8413\n",
      "Epoch 132/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0379 - acc: 0.9895 - val_loss: 0.8976 - val_acc: 0.7619\n",
      "Epoch 133/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0536 - acc: 0.9789 - val_loss: 0.8079 - val_acc: 0.7937\n",
      "Epoch 134/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0441 - acc: 0.9842 - val_loss: 0.6361 - val_acc: 0.8571\n",
      "Epoch 135/150\n",
      "2/2 [==============================] - 0s 27ms/step - loss: 0.0152 - acc: 0.9947 - val_loss: 0.9036 - val_acc: 0.7619\n",
      "Epoch 136/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0410 - acc: 0.9895 - val_loss: 0.7177 - val_acc: 0.8254\n",
      "Epoch 137/150\n",
      "2/2 [==============================] - 0s 46ms/step - loss: 0.0387 - acc: 0.9895 - val_loss: 0.3525 - val_acc: 0.9048\n",
      "Epoch 138/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.1272 - acc: 0.9526 - val_loss: 0.7547 - val_acc: 0.7778\n",
      "Epoch 139/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0531 - acc: 0.9737 - val_loss: 0.5520 - val_acc: 0.8571\n",
      "Epoch 140/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0540 - acc: 0.9737 - val_loss: 0.4230 - val_acc: 0.8730\n",
      "Epoch 141/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0576 - acc: 0.9737 - val_loss: 0.6661 - val_acc: 0.8095\n",
      "Epoch 142/150\n",
      "2/2 [==============================] - 0s 40ms/step - loss: 0.0667 - acc: 0.9737 - val_loss: 0.8469 - val_acc: 0.7143\n",
      "Epoch 143/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0261 - acc: 0.9947 - val_loss: 0.5148 - val_acc: 0.8413\n",
      "Epoch 144/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0536 - acc: 0.9789 - val_loss: 0.9252 - val_acc: 0.7302\n",
      "Epoch 145/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0253 - acc: 0.9947 - val_loss: 1.2486 - val_acc: 0.5873\n",
      "Epoch 146/150\n",
      "2/2 [==============================] - 0s 44ms/step - loss: 0.0400 - acc: 0.9895 - val_loss: 0.8704 - val_acc: 0.7302\n",
      "Epoch 147/150\n",
      "2/2 [==============================] - 0s 29ms/step - loss: 0.0222 - acc: 0.9947 - val_loss: 0.5220 - val_acc: 0.8889\n",
      "Epoch 148/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0632 - acc: 0.9789 - val_loss: 0.9164 - val_acc: 0.7778\n",
      "Epoch 149/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0557 - acc: 0.9842 - val_loss: 1.6250 - val_acc: 0.6349\n",
      "Epoch 150/150\n",
      "2/2 [==============================] - 0s 28ms/step - loss: 0.0622 - acc: 0.9632 - val_loss: 0.7784 - val_acc: 0.8095\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f2db3d10890>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train,\n",
    "         y_train,\n",
    "         batch_size=128,\n",
    "         epochs=150,\n",
    "         validation_data=(x_valid, y_valid),)\n",
    "\n",
    "#this one is reponsible for training you can see that we give that function the x_train(data)and y_train(labe) and the validation data\n",
    "#plus the number of epochs wich represent how much are we going to train our model and it means how many time we are going to pass through our data\n",
    "# The batch size is a number of samples processed before the model is updated The size of a batch must be more than or equal to one and less than or equal to the number of samples in the training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:12:56.629699Z",
     "iopub.status.busy": "2022-04-18T10:12:56.629374Z",
     "iopub.status.idle": "2022-04-18T10:12:57.550115Z",
     "shell.execute_reply": "2022-04-18T10:12:57.548857Z",
     "shell.execute_reply.started": "2022-04-18T10:12:56.629667Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"1512pt\" viewBox=\"0.00 0.00 474.00 1134.00\" width=\"632pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1.33 1.33) rotate(0) translate(4 1130)\">\n",
       "<title>G</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-1130 470,-1130 470,4 -4,4\" stroke=\"transparent\"/>\n",
       "<!-- 139832525616016 -->\n",
       "<g class=\"node\" id=\"node1\">\n",
       "<title>139832525616016</title>\n",
       "<polygon fill=\"none\" points=\"18,-1079.5 18,-1125.5 448,-1125.5 448,-1079.5 18,-1079.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"125.5\" y=\"-1098.8\">conv2d_3_input: InputLayer</text>\n",
       "<polyline fill=\"none\" points=\"233,-1079.5 233,-1125.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"267\" y=\"-1110.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"233,-1102.5 301,-1102.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"267\" y=\"-1087.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"301,-1079.5 301,-1125.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"374.5\" y=\"-1110.3\">[(None, 32, 32, 3)]</text>\n",
       "<polyline fill=\"none\" points=\"301,-1102.5 448,-1102.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"374.5\" y=\"-1087.3\">[(None, 32, 32, 3)]</text>\n",
       "</g>\n",
       "<!-- 139832548635536 -->\n",
       "<g class=\"node\" id=\"node2\">\n",
       "<title>139832548635536</title>\n",
       "<polygon fill=\"none\" points=\"51.5,-996.5 51.5,-1042.5 414.5,-1042.5 414.5,-996.5 51.5,-996.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"126\" y=\"-1015.8\">conv2d_3: Conv2D</text>\n",
       "<polyline fill=\"none\" points=\"200.5,-996.5 200.5,-1042.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"234.5\" y=\"-1027.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"200.5,-1019.5 268.5,-1019.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"234.5\" y=\"-1004.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"268.5,-996.5 268.5,-1042.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-1027.3\">(None, 32, 32, 3)</text>\n",
       "<polyline fill=\"none\" points=\"268.5,-1019.5 414.5,-1019.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-1004.3\">(None, 32, 32, 16)</text>\n",
       "</g>\n",
       "<!-- 139832525616016&#45;&gt;139832548635536 -->\n",
       "<g class=\"edge\" id=\"edge1\">\n",
       "<title>139832525616016-&gt;139832548635536</title>\n",
       "<path d=\"M233,-1079.37C233,-1071.15 233,-1061.66 233,-1052.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-1052.61 233,-1042.61 229.5,-1052.61 236.5,-1052.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832548637392 -->\n",
       "<g class=\"node\" id=\"node3\">\n",
       "<title>139832548637392</title>\n",
       "<polygon fill=\"none\" points=\"0,-913.5 0,-959.5 466,-959.5 466,-913.5 0,-913.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"126\" y=\"-932.8\">max_pooling2d_3: MaxPooling2D</text>\n",
       "<polyline fill=\"none\" points=\"252,-913.5 252,-959.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"286\" y=\"-944.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"252,-936.5 320,-936.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"286\" y=\"-921.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"320,-913.5 320,-959.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-944.3\">(None, 32, 32, 16)</text>\n",
       "<polyline fill=\"none\" points=\"320,-936.5 466,-936.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-921.3\">(None, 16, 16, 16)</text>\n",
       "</g>\n",
       "<!-- 139832548635536&#45;&gt;139832548637392 -->\n",
       "<g class=\"edge\" id=\"edge2\">\n",
       "<title>139832548635536-&gt;139832548637392</title>\n",
       "<path d=\"M233,-996.37C233,-988.15 233,-978.66 233,-969.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-969.61 233,-959.61 229.5,-969.61 236.5,-969.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525617296 -->\n",
       "<g class=\"node\" id=\"node4\">\n",
       "<title>139832525617296</title>\n",
       "<polygon fill=\"none\" points=\"48,-830.5 48,-876.5 418,-876.5 418,-830.5 48,-830.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"126\" y=\"-849.8\">dropout_4: Dropout</text>\n",
       "<polyline fill=\"none\" points=\"204,-830.5 204,-876.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"238\" y=\"-861.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"204,-853.5 272,-853.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"238\" y=\"-838.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"272,-830.5 272,-876.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-861.3\">(None, 16, 16, 16)</text>\n",
       "<polyline fill=\"none\" points=\"272,-853.5 418,-853.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-838.3\">(None, 16, 16, 16)</text>\n",
       "</g>\n",
       "<!-- 139832548637392&#45;&gt;139832525617296 -->\n",
       "<g class=\"edge\" id=\"edge3\">\n",
       "<title>139832548637392-&gt;139832525617296</title>\n",
       "<path d=\"M233,-913.37C233,-905.15 233,-895.66 233,-886.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-886.61 233,-876.61 229.5,-886.61 236.5,-886.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525581200 -->\n",
       "<g class=\"node\" id=\"node5\">\n",
       "<title>139832525581200</title>\n",
       "<polygon fill=\"none\" points=\"51.5,-747.5 51.5,-793.5 414.5,-793.5 414.5,-747.5 51.5,-747.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"126\" y=\"-766.8\">conv2d_4: Conv2D</text>\n",
       "<polyline fill=\"none\" points=\"200.5,-747.5 200.5,-793.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"234.5\" y=\"-778.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"200.5,-770.5 268.5,-770.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"234.5\" y=\"-755.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"268.5,-747.5 268.5,-793.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-778.3\">(None, 16, 16, 16)</text>\n",
       "<polyline fill=\"none\" points=\"268.5,-770.5 414.5,-770.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-755.3\">(None, 16, 16, 16)</text>\n",
       "</g>\n",
       "<!-- 139832525617296&#45;&gt;139832525581200 -->\n",
       "<g class=\"edge\" id=\"edge4\">\n",
       "<title>139832525617296-&gt;139832525581200</title>\n",
       "<path d=\"M233,-830.37C233,-822.15 233,-812.66 233,-803.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-803.61 233,-793.61 229.5,-803.61 236.5,-803.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832547751120 -->\n",
       "<g class=\"node\" id=\"node6\">\n",
       "<title>139832547751120</title>\n",
       "<polygon fill=\"none\" points=\"0,-664.5 0,-710.5 466,-710.5 466,-664.5 0,-664.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"126\" y=\"-683.8\">max_pooling2d_4: MaxPooling2D</text>\n",
       "<polyline fill=\"none\" points=\"252,-664.5 252,-710.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"286\" y=\"-695.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"252,-687.5 320,-687.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"286\" y=\"-672.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"320,-664.5 320,-710.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-695.3\">(None, 16, 16, 16)</text>\n",
       "<polyline fill=\"none\" points=\"320,-687.5 466,-687.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-672.3\">(None, 8, 8, 16)</text>\n",
       "</g>\n",
       "<!-- 139832525581200&#45;&gt;139832547751120 -->\n",
       "<g class=\"edge\" id=\"edge5\">\n",
       "<title>139832525581200-&gt;139832547751120</title>\n",
       "<path d=\"M233,-747.37C233,-739.15 233,-729.66 233,-720.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-720.61 233,-710.61 229.5,-720.61 236.5,-720.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525648912 -->\n",
       "<g class=\"node\" id=\"node7\">\n",
       "<title>139832525648912</title>\n",
       "<polygon fill=\"none\" points=\"57,-581.5 57,-627.5 409,-627.5 409,-581.5 57,-581.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-600.8\">dropout_5: Dropout</text>\n",
       "<polyline fill=\"none\" points=\"213,-581.5 213,-627.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"247\" y=\"-612.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"213,-604.5 281,-604.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"247\" y=\"-589.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"281,-581.5 281,-627.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-612.3\">(None, 8, 8, 16)</text>\n",
       "<polyline fill=\"none\" points=\"281,-604.5 409,-604.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-589.3\">(None, 8, 8, 16)</text>\n",
       "</g>\n",
       "<!-- 139832547751120&#45;&gt;139832525648912 -->\n",
       "<g class=\"edge\" id=\"edge6\">\n",
       "<title>139832547751120-&gt;139832525648912</title>\n",
       "<path d=\"M233,-664.37C233,-656.15 233,-646.66 233,-637.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-637.61 233,-627.61 229.5,-637.61 236.5,-637.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525648848 -->\n",
       "<g class=\"node\" id=\"node8\">\n",
       "<title>139832525648848</title>\n",
       "<polygon fill=\"none\" points=\"60.5,-498.5 60.5,-544.5 405.5,-544.5 405.5,-498.5 60.5,-498.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-517.8\">conv2d_5: Conv2D</text>\n",
       "<polyline fill=\"none\" points=\"209.5,-498.5 209.5,-544.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.5\" y=\"-529.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"209.5,-521.5 277.5,-521.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.5\" y=\"-506.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"277.5,-498.5 277.5,-544.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-529.3\">(None, 8, 8, 16)</text>\n",
       "<polyline fill=\"none\" points=\"277.5,-521.5 405.5,-521.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"341.5\" y=\"-506.3\">(None, 8, 8, 36)</text>\n",
       "</g>\n",
       "<!-- 139832525648912&#45;&gt;139832525648848 -->\n",
       "<g class=\"edge\" id=\"edge7\">\n",
       "<title>139832525648912-&gt;139832525648848</title>\n",
       "<path d=\"M233,-581.37C233,-573.15 233,-563.66 233,-554.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-554.61 233,-544.61 229.5,-554.61 236.5,-554.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832398044496 -->\n",
       "<g class=\"node\" id=\"node9\">\n",
       "<title>139832398044496</title>\n",
       "<polygon fill=\"none\" points=\"9,-415.5 9,-461.5 457,-461.5 457,-415.5 9,-415.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-434.8\">max_pooling2d_5: MaxPooling2D</text>\n",
       "<polyline fill=\"none\" points=\"261,-415.5 261,-461.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"295\" y=\"-446.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"261,-438.5 329,-438.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"295\" y=\"-423.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"329,-415.5 329,-461.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-446.3\">(None, 8, 8, 36)</text>\n",
       "<polyline fill=\"none\" points=\"329,-438.5 457,-438.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"393\" y=\"-423.3\">(None, 4, 4, 36)</text>\n",
       "</g>\n",
       "<!-- 139832525648848&#45;&gt;139832398044496 -->\n",
       "<g class=\"edge\" id=\"edge8\">\n",
       "<title>139832525648848-&gt;139832398044496</title>\n",
       "<path d=\"M233,-498.37C233,-490.15 233,-480.66 233,-471.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-471.61 233,-461.61 229.5,-471.61 236.5,-471.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832398041232 -->\n",
       "<g class=\"node\" id=\"node10\">\n",
       "<title>139832398041232</title>\n",
       "<polygon fill=\"none\" points=\"57,-332.5 57,-378.5 409,-378.5 409,-332.5 57,-332.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-351.8\">dropout_6: Dropout</text>\n",
       "<polyline fill=\"none\" points=\"213,-332.5 213,-378.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"247\" y=\"-363.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"213,-355.5 281,-355.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"247\" y=\"-340.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"281,-332.5 281,-378.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-363.3\">(None, 4, 4, 36)</text>\n",
       "<polyline fill=\"none\" points=\"281,-355.5 409,-355.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-340.3\">(None, 4, 4, 36)</text>\n",
       "</g>\n",
       "<!-- 139832398044496&#45;&gt;139832398041232 -->\n",
       "<g class=\"edge\" id=\"edge9\">\n",
       "<title>139832398044496-&gt;139832398041232</title>\n",
       "<path d=\"M233,-415.37C233,-407.15 233,-397.66 233,-388.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-388.61 233,-378.61 229.5,-388.61 236.5,-388.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832398044624 -->\n",
       "<g class=\"node\" id=\"node11\">\n",
       "<title>139832398044624</title>\n",
       "<polygon fill=\"none\" points=\"65,-249.5 65,-295.5 401,-295.5 401,-249.5 65,-249.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"135\" y=\"-268.8\">flatten_1: Flatten</text>\n",
       "<polyline fill=\"none\" points=\"205,-249.5 205,-295.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"239\" y=\"-280.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"205,-272.5 273,-272.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"239\" y=\"-257.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"273,-249.5 273,-295.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"337\" y=\"-280.3\">(None, 4, 4, 36)</text>\n",
       "<polyline fill=\"none\" points=\"273,-272.5 401,-272.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"337\" y=\"-257.3\">(None, 576)</text>\n",
       "</g>\n",
       "<!-- 139832398041232&#45;&gt;139832398044624 -->\n",
       "<g class=\"edge\" id=\"edge10\">\n",
       "<title>139832398041232-&gt;139832398044624</title>\n",
       "<path d=\"M233,-332.37C233,-324.15 233,-314.66 233,-305.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-305.61 233,-295.61 229.5,-305.61 236.5,-305.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525581328 -->\n",
       "<g class=\"node\" id=\"node12\">\n",
       "<title>139832525581328</title>\n",
       "<polygon fill=\"none\" points=\"84.5,-166.5 84.5,-212.5 381.5,-212.5 381.5,-166.5 84.5,-166.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"148.5\" y=\"-185.8\">dense_2: Dense</text>\n",
       "<polyline fill=\"none\" points=\"212.5,-166.5 212.5,-212.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"246.5\" y=\"-197.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"212.5,-189.5 280.5,-189.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"246.5\" y=\"-174.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"280.5,-166.5 280.5,-212.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"331\" y=\"-197.3\">(None, 576)</text>\n",
       "<polyline fill=\"none\" points=\"280.5,-189.5 381.5,-189.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"331\" y=\"-174.3\">(None, 512)</text>\n",
       "</g>\n",
       "<!-- 139832398044624&#45;&gt;139832525581328 -->\n",
       "<g class=\"edge\" id=\"edge11\">\n",
       "<title>139832398044624-&gt;139832525581328</title>\n",
       "<path d=\"M233,-249.37C233,-241.15 233,-231.66 233,-222.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-222.61 233,-212.61 229.5,-222.61 236.5,-222.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525582160 -->\n",
       "<g class=\"node\" id=\"node13\">\n",
       "<title>139832525582160</title>\n",
       "<polygon fill=\"none\" points=\"70.5,-83.5 70.5,-129.5 395.5,-129.5 395.5,-83.5 70.5,-83.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"148.5\" y=\"-102.8\">dropout_7: Dropout</text>\n",
       "<polyline fill=\"none\" points=\"226.5,-83.5 226.5,-129.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"260.5\" y=\"-114.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"226.5,-106.5 294.5,-106.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"260.5\" y=\"-91.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"294.5,-83.5 294.5,-129.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-114.3\">(None, 512)</text>\n",
       "<polyline fill=\"none\" points=\"294.5,-106.5 395.5,-106.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"345\" y=\"-91.3\">(None, 512)</text>\n",
       "</g>\n",
       "<!-- 139832525581328&#45;&gt;139832525582160 -->\n",
       "<g class=\"edge\" id=\"edge12\">\n",
       "<title>139832525581328-&gt;139832525582160</title>\n",
       "<path d=\"M233,-166.37C233,-158.15 233,-148.66 233,-139.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-139.61 233,-129.61 229.5,-139.61 236.5,-139.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 139832525586960 -->\n",
       "<g class=\"node\" id=\"node14\">\n",
       "<title>139832525586960</title>\n",
       "<polygon fill=\"none\" points=\"84.5,-0.5 84.5,-46.5 381.5,-46.5 381.5,-0.5 84.5,-0.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"148.5\" y=\"-19.8\">dense_3: Dense</text>\n",
       "<polyline fill=\"none\" points=\"212.5,-0.5 212.5,-46.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"246.5\" y=\"-31.3\">input:</text>\n",
       "<polyline fill=\"none\" points=\"212.5,-23.5 280.5,-23.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"246.5\" y=\"-8.3\">output:</text>\n",
       "<polyline fill=\"none\" points=\"280.5,-0.5 280.5,-46.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"331\" y=\"-31.3\">(None, 512)</text>\n",
       "<polyline fill=\"none\" points=\"280.5,-23.5 381.5,-23.5 \" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"331\" y=\"-8.3\">(None, 1)</text>\n",
       "</g>\n",
       "<!-- 139832525582160&#45;&gt;139832525586960 -->\n",
       "<g class=\"edge\" id=\"edge13\">\n",
       "<title>139832525582160-&gt;139832525586960</title>\n",
       "<path d=\"M233,-83.37C233,-75.15 233,-65.66 233,-56.73\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"236.5,-56.61 233,-46.61 229.5,-56.61 236.5,-56.61\" stroke=\"black\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import SVG\n",
    "from keras.utils.vis_utils import model_to_dot\n",
    "SVG(model_to_dot(model,show_shapes = True).create(prog='dot', format='svg'))\n",
    "#just another way to show your model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:13:31.347620Z",
     "iopub.status.busy": "2022-04-18T10:13:31.347311Z",
     "iopub.status.idle": "2022-04-18T10:13:31.452352Z",
     "shell.execute_reply": "2022-04-18T10:13:31.451265Z",
     "shell.execute_reply.started": "2022-04-18T10:13:31.347571Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Test accuracy: 0.8095238208770752\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test set we gonna see if the picture are predicted in a right way\n",
    "score = model.evaluate(x_test, y_test, verbose=0)\n",
    "\n",
    "# Print test accuracy\n",
    "print('\\n', 'Test accuracy:', score[1])\n",
    "#you can elevate the accuracy score by just adding more to the model some more layers but its sufficient for this one 80% is a good result for a fully connect model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-04-18T10:13:50.084099Z",
     "iopub.status.busy": "2022-04-18T10:13:50.083750Z",
     "iopub.status.idle": "2022-04-18T10:13:50.882980Z",
     "shell.execute_reply": "2022-04-18T10:13:50.881856Z",
     "shell.execute_reply.started": "2022-04-18T10:13:50.084021Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(63, 1)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x1800 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#here is a code to predict some sampels from the test_data so we can see if the model is doing fine to  note that the notation is like the fellowing\n",
    "#the format is [prediction(label)]: the prediciton is the prediction of the model and the label is the right value of the picture from the data\n",
    "labels =[\"Yes\",  # index 0\n",
    "        \"No\",      # index 1\n",
    "        ]\n",
    "y_hat = model.predict(x_test)\n",
    "print(y_hat.shape)\n",
    "# Plot a random sample of 8 test images, their predicted labels and ground truth\n",
    "figure = plt.figure(figsize=(25, 25))\n",
    "for i, index in enumerate(np.random.choice(x_test.shape[0], size=8, replace=False)):\n",
    "    ax = figure.add_subplot(13, 5, i + 1, xticks=[], yticks=[])\n",
    "    # Display each image\n",
    "    ax.imshow(np.squeeze(x_test[index]))\n",
    "    predict_index = np.argmax(y_hat[index])\n",
    "    true_index = np.argmax(y_test[index])\n",
    "    # Set the title for each image\n",
    "    ax.set_title(\"{} ({})\".format(labels[predict_index], \n",
    "                                  labels[true_index]),\n",
    "                                  color=(\"green\" if predict_index == true_index else \"red\"))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
